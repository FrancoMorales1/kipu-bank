{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_thresholdWithdraw",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_bankCap",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountAvailable",
						"type": "uint256"
					}
				],
				"name": "BankIsFull",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DirectTransferAttempt",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requested",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "available",
						"type": "uint256"
					}
				],
				"name": "InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidBankCap",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidThreshold",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidWithdrawAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransactionError",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "WithdrawOverLimit",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountDeposited",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTotalAmount",
						"type": "uint256"
					}
				],
				"name": "UserDeposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountWithdraw",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTotalAmount",
						"type": "uint256"
					}
				],
				"name": "UserWithdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_bankCap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_depositCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_thresholdWithdraw",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_withdrawCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "Smart Contact to deposit and withdraw native tokens.",
			"errors": {
				"BankIsFull(uint256)": [
					{
						"params": {
							"amountAvailable": "Remaining space before reaching the bank cap."
						}
					}
				],
				"InsufficientBalance(uint256,uint256)": [
					{
						"params": {
							"available": "The balance available in the user account.",
							"requested": "The amount requested for withdrawal."
						}
					}
				]
			},
			"kind": "dev",
			"methods": {
				"deposit()": {
					"details": "Can revert with {BankIsFull} if the deposit would exceed the bank capacity. Emits a {UserDeposit} event when completed."
				},
				"getBalance()": {
					"returns": {
						"_0": "The amount of native tokens stored for the caller."
					}
				},
				"withdraw(uint256)": {
					"details": "Can revert with {WithdrawOverLimit} if amount exceeds the withdrawal threshold. Can revert with {InsufficientBalance} if user has insufficient funds. Emits a {UserWithdraw} event when completed.",
					"params": {
						"_amount": "The amount of tokens to withdraw."
					}
				}
			},
			"title": "Kipu-bank",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"BankIsFull(uint256)": [
					{
						"notice": "Thrown when a deposit would exceed the total bank capacity."
					}
				],
				"InsufficientBalance(uint256,uint256)": [
					{
						"notice": "Thrown when a user tries to withdraw more than their current balance."
					}
				],
				"InvalidBankCap()": [
					{
						"notice": "Thrown when the constructor receives as bank cap 0."
					}
				],
				"InvalidThreshold()": [
					{
						"notice": "Thrown when the constructor receives as withdraw threshold 0."
					}
				],
				"InvalidWithdrawAmount()": [
					{
						"notice": "Thrown when the an user tries to withdraw 0 native tokens."
					}
				],
				"TransactionError()": [
					{
						"notice": "Thrown when a transfer of native tokens fails."
					}
				],
				"WithdrawOverLimit()": [
					{
						"notice": "Thrown when a withdrawal amount exceeds the allowed threshold."
					}
				]
			},
			"events": {
				"UserDeposit(address,uint256,uint256)": {
					"notice": "Event emitted when an user deposits native tokens in the bank."
				},
				"UserWithdraw(address,uint256,uint256)": {
					"notice": "Event emitted when an user withdraw native tokens from the bank."
				}
			},
			"kind": "user",
			"methods": {
				"deposit()": {
					"notice": "Allows a user to deposit native tokens (ETH) into their personal vault."
				},
				"getBalance()": {
					"notice": "Returns the amount of native tokens stored to callerâ€™s address."
				},
				"s_bankCap()": {
					"notice": "Limit of native tokens the bank can hold."
				},
				"s_depositCount()": {
					"notice": "Counter of the total number of deposits."
				},
				"s_thresholdWithdraw()": {
					"notice": "Limit of maximum withdraw per call."
				},
				"s_withdrawCount()": {
					"notice": "Counter of the total number of withdrawals."
				},
				"withdraw(uint256)": {
					"notice": "Allows a user to withdraw their native tokens from the bank account."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/kipu-bank.sol": "KipuBank"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/kipu-bank.sol": {
			"keccak256": "0x0e583578e93fe670a18848437498964494b24b5daf0e7e08d426e69e4b37552d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://53ea2ce02586dc268b96f58ed8dc6e82502fe469dcfcd7c9500f7fc3881b3667",
				"dweb:/ipfs/QmajPSyVBnUDMmtGnfKNvbHBY2deADDYktAQvnpj2gvpht"
			]
		}
	},
	"version": 1
}